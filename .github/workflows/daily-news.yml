name: Daily News - Pure HTTP

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

jobs:
  trigger:
    runs-on: ubuntu-latest
    steps:
    - name: Test with Pure HTTP
      env:
        COZE_TOKEN: ${{ secrets.COZE_TOKEN }}
      run: |
        # 创建 Node.js 脚本使用原生 http 模块
        node << 'EOF'
        const https = require('https');
        
        const token = process.env.COZE_TOKEN;
        const postData = JSON.stringify({
          workflow_id: "7562209382487113774",
          parameters: {
            input: "https://auto.163.com/"
          }
        });
        
        console.log('Token 长度:', token.length);
        console.log('Token 前10位:', token.substring(0, 10));
        console.log('Token 后10位:', token.substring(token.length - 10));
        
        const options = {
          hostname: 'api.coze.cn',
          port: 443,
          path: '/v1/workflow/stream_run',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(postData),
            'Authorization': `Bearer ${token}`,
            'User-Agent': 'GitHub-Actions-Node-HTTP'
          }
        };
        
        console.log('请求头:', JSON.stringify(options.headers, null, 2));
        
        const req = https.request(options, (res) => {
          console.log('状态码:', res.statusCode);
          console.log('响应头:', JSON.stringify(res.headers, null, 2));
          
          let data = '';
          res.on('data', (chunk) => {
            data += chunk;
          });
          
          res.on('end', () => {
            console.log('响应体:', data);
            
            if (res.statusCode === 200) {
              console.log('✅ 工作流触发成功！');
              process.exit(0);
            } else {
              console.log('❌ 工作流触发失败');
              process.exit(1);
            }
          });
        });
        
        req.on('error', (e) => {
          console.error('请求错误:', e);
          process.exit(1);
        });
        
        req.write(postData);
        req.end();
        EOF
