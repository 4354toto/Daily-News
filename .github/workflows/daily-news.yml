name: Test Authentication

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Test Token Format
      run: |
        echo "=== Token格式测试 ==="
        echo "Token长度: ${#COZE_TOKEN}"
        echo "Token开头: ${COZE_TOKEN:0:20}"
        echo "Token结尾: ${COFIG_TOKEN: -20}"
        echo "完整Token: $COZE_TOKEN"
        
        # 检查Token格式
        if [[ "$COZE_TOKEN" =~ ^cztei_ ]]; then
          echo "✅ Token格式正确（以cztei_开头）"
        else
          echo "❌ Token格式异常"
        fi

    - name: Test API with Detailed Debug
      run: |
        echo "=== 详细API测试 ==="
        
        # 创建临时文件存储Token，避免在日志中暴露
        echo "$COZE_TOKEN" > token.txt
        
        # 使用详细调试
        curl -v -X POST "https://api.coze.cn/v1/workflow/stream_run" \
          -H "Authorization: Bearer $(cat token.txt)" \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-Test" \
          -d '{"workflow_id": "756220938248711374", "parameters": {}}' \
          -o response.txt \
          2> curl_debug.txt
        
        # 显示调试信息（隐藏敏感信息）
        echo "=== cURL调试信息 ==="
        sed 's/Authorization: Bearer .*/Authorization: Bearer [REDACTED]/' curl_debug.txt
        
        echo "=== 响应状态 ==="
        grep "HTTP/" curl_debug.txt | tail -1
        
        echo "=== 响应体 ==="
        cat response.txt
        
        # 清理
        rm -f token.txt response.txt curl_debug.txt

    - name: Test Different Auth Methods
      run: |
        echo "=== 测试不同认证方法 ==="
        
        # 方法1: 标准Bearer
        echo "方法1: Bearer Token"
        CODE1=$(curl -s -o /dev/null -w "%{http_code}" \
          -X POST "https://api.coze.cn/v1/workflow/stream_run" \
          -H "Authorization: Bearer $COZE_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"workflow_id": "756220938248711374", "parameters": {}}')
        echo "HTTP状态: $CODE1"
        
        # 方法2: 直接使用Token（非标准）
        echo "方法2: 直接Token"
        CODE2=$(curl -s -o /dev/null -w "%{http_code}" \
          -X POST "https://api.coze.cn/v1/workflow/stream_run" \
          -H "Authorization: Token $COZE_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"workflow_id": "756220938248711374", "parameters": {}}')
        echo "HTTP状态: $CODE2"
        
        # 方法3: 使用X-API-Key头部（如果支持）
        echo "方法3: X-API-Key"
        CODE3=$(curl -s -o /dev/null -w "%{http_code}" \
          -X POST "https://api.coze.cn/v1/workflow/stream_run" \
          -H "X-API-Key: $COZE_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"workflow_id": "756220938248711374", "parameters": {}}')
        echo "HTTP状态: $CODE3"
